from datetime import datetime
from unittest.mock import patch, Mock

from echo.layers.python.mongo_db import create_post, REACTIONS
from echo.tests.unit.test_mongodb_layer.utils import get_john_smith, get_percy_jackson


INITAL_POST_COUNT = 3
PACKAGE = "echo.layers.python.mongo_db"


class TestCreatePost:
    
    # common data
    user_id = get_percy_jackson()["_id"]
    device_id = get_percy_jackson()["yap_yap_auth_tokens"][0]["device_id"]
    token = get_percy_jackson()["yap_yap_auth_tokens"][0]["token"]
    
    date = datetime.fromisoformat("2024-01-25T23:03:21")
    journal_entry = "A sad entry generated by pytest"
    sentimental_value = "sad"
    insert_id = "66086ed3d9c521a062034106"

    def test_falied_to_insert_post(
        self, 
        mongodb, 
        mock_objectid,
        mock_read_client,
        mock_mongo_client,
        mock_read_users_collection, 
        mock_read_posts_collection
    ):
        mock_read_client.return_value = mock_mongo_client
        mock_objectid.return_value = self.user_id
        mock_read_users_collection.return_value = mongodb.users
        mock_read_posts_collection.return_value = mongodb.posts
    
        with (patch(f"{PACKAGE}.datetime") as mocked_datetime,
              patch.object(mongodb.posts, "insert_one") as mock_find_one):
                
            mock_insert_result = Mock()
            mock_insert_result.acknowledged = False
            mock_find_one.return_value = mock_insert_result
        
            mocked_datetime.now.return_value = self.date
            assert create_post(
                self.user_id, 
                self.device_id, 
                self.token,
                self.journal_entry, 
                self.sentimental_value
            ) == False  
                    
            # check that the collections were not affected
            assert mongodb.posts.count_documents({}) == INITAL_POST_COUNT
    
    def test_failed_to_update_user_posts(
        self, 
        mongodb, 
        mock_objectid,
        mock_read_client,
        mock_mongo_client,
        mock_read_users_collection, 
        mock_read_posts_collection
    ):
        mock_read_client.return_value = mock_mongo_client
        mock_objectid.return_value = self.user_id
        mock_read_users_collection.return_value = mongodb.users
        mock_read_posts_collection.return_value = mongodb.posts
    
        with (patch(f"{PACKAGE}.datetime") as mocked_datetime,
              patch.object(mongodb.posts, "insert_one") as mock_insert_one,
              patch.object(mongodb.users, "update_one") as mock_update_one):
                
            mock_insert_result = Mock()
            mock_insert_result.acknowledged = True
            mock_insert_result.inserted_id = self.insert_id
            mock_insert_one.return_value = mock_insert_result
        
            mock_update_result = Mock()
            mock_update_result.acknowledged = False
            mock_update_one.return_value = mock_update_result
            
            mocked_datetime.now.return_value = self.date
            assert create_post(
                self.user_id, 
                self.device_id,
                self.token,
                self.journal_entry, 
                self.sentimental_value
            ) == False    
                    
            # check that the collections were not affected
            assert mongodb.posts.count_documents({}) == INITAL_POST_COUNT
    
    def test_successful(
        self, 
        mongodb, 
        mock_objectid,
        mock_read_client,
        mock_mongo_client,
        mock_read_users_collection, 
        mock_read_posts_collection
    ):
        mock_read_client.return_value = mock_mongo_client
        mock_objectid.return_value = self.user_id
        mock_read_users_collection.return_value = mongodb.users
        mock_read_posts_collection.return_value = mongodb.posts
        
        #! Can not mock insert_one and update_one
        #! in create_post() because it requires a session
        
        mongodb.posts.insert_one(
            {
                "user_id": self.insert_id,
                "last_saved_date": self.date,
                "journal_entry": self.journal_entry,
                "sentimental_value": self.sentimental_value,
                "reactions": {reaction: 0 for reaction in REACTIONS},
                "reacted_users_ids": []
            },
            session=None
        )

        get_john_smith()["posts"].append(self.insert_id)
        mongodb.users.update_one(
            {"_id": self.user_id},
            {"$set": {"posts": get_john_smith()["posts"]}}
        )
                
        with patch(f"{PACKAGE}.datetime") as mocked_datetime:
            mocked_datetime.now.return_value = self.date
            assert create_post(
                self.user_id,
                self.device_id,
                self.token,
                self.journal_entry, 
                self.sentimental_value
            ) == True    
                    
            # check that the collections are updated
            assert mongodb.posts.count_documents({}) == INITAL_POST_COUNT + 1